---
name: package with latest duckdb_fdw release built

env:
  upstream_repo_owner: alitrack
  upstream_repo_repo: duckdb_fdw

on:
  workflow_dispatch:
    inputs:
      # fix for now, because upstream does not have any tags or releases
      # https://github.com/alitrack/duckdb_fdw/issues/31
      upstream_version:
        description: shasum of duckdb_fdw
        required: false
        default: a3bb6a7ce2d465358ba243048d96d8f0652c6baa
      duckdb_version:
        description: duckdb version to build
        required: false
        default: v0.10.0
      debian_revision:
        description: Debian revision of package
        required: false
        default: '1'

  # disable for now
  #schedule:
  #- cron: '56 0 * * *' # daily

jobs:
  # info:
  #   name: Get info on latest upstream and built package
  #   runs-on: ubuntu-latest
  #   outputs:
  #     upstream_version: ${{ steps.get_latest_package.outputs.result }}
  #   steps:
  #   - name: Get latest package release
  #     id: get_latest_package
  #     uses: actions/github-script@v6
  #     with:
  #       retries: 3
  #       result-encoding: string
  #       script: |
  #         return await github.rest.repos.getLatestRelease({
  #           owner: "${{ env.upstream_repo_owner }}",
  #           repo: "${{ env.upstream_repo_repo }}"
  #         }).then(r => r.data.tag_name)

  build:
    name: build new packages
    # needs: [info]
    #if: ${{ ! contains(needs.image_tags.outputs.packages, needs.info.outputs.upstream_version) }}
    strategy:
      matrix:
        postgres: ["15", "16"]
        box:
          - { runner: ubuntu-latest, arch: amd64 }
          #- { runner: arm-runner, arch: arm64 }

    runs-on: ${{ matrix.box.runner }}
    container:
      image: ghcr.io/${{ github.repository_owner }}/spilo-builder
    defaults:
      run:
        shell: bash
    steps:
    - uses: actions/checkout@v4
      with:
        repository: ${{ env.upstream_repo_owner }}/${{ env.upstream_repo_repo }}
        # ref: ${{ needs.info.outputs.upstream_version }}
        ref: ${{ inputs.upstream_version }}

    - name: install libduckdb.so
      run: |
        PATH=/usr/lib/postgresql/${{ matrix.postgres }}/bin:$PATH

        curl -fsSLo /tmp/libduckdb-linux-amd64.zip "https://github.com/duckdb/duckdb/releases/download/${{ inputs.duckdb_version }}/libduckdb-linux-amd64.zip"
        unzip /tmp/libduckdb-linux-amd64.zip libduckdb.so
        libdir="$(pg_config --libdir)"
        cp libduckdb.so "$libdir"
        mkdir -p "destdir/$libdir"
        cp libduckdb.so "destdir/$libdir"

    - name: make
      run: |
        PATH=/usr/lib/postgresql/${{ matrix.postgres }}/bin:$PATH
        make USE_PGXS=1
 
    - name: make install
      run: |
        PATH=/usr/lib/postgresql/${{ matrix.postgres }}/bin:$PATH
        make USE_PGXS=1 DESTDIR=$PWD/destdir install

    - name: create debian packages
      run: |
        set -x
        extension_name="$(jq -r .name < META.json)"
        deb_name="${extension_name//_/-}"
        deb_rev="${{ inputs.debian_revision }}"
        deb_version="$(jq -r .version < META.json)-$deb_rev"
        package_dir="$PWD/destdir"

        mkdir -p ${package_dir}/DEBIAN
        cat <<EOF > "${package_dir}/DEBIAN/control"
        Package: $deb_name-pg${{ matrix.postgres}}
        Version: $deb_version
        Section: database
        Priority: optional
        Architecture: ${{ matrix.box.arch }}
        Maintainer: Tobias Florek <me@ibotty.net>
        Description: ${{ env.upstream_repo_owner }} $extension_name PostgreSQL extension
        EOF

        # Create deb package
        chown -R root:root ${package_dir}
        chmod -R 00755 ${package_dir}
        dpkg-deb --build --root-owner-group "$package_dir" "$deb_name-pg${{ matrix.postgres }}.deb"

        mkdir -p deb-uploads
        find . -name *.deb -exec cp {} deb-uploads \;
        echo "found debs:"
        ls $PWD/deb-uploads -la

    - name: update apt repository
      uses: ibotty/apt-repo-update-action@v2
      with:
        debug: true
        github_token: ${{ secrets.GITHUB_TOKEN }}
        repo_supported_arch: |
          amd64
        repo_supported_distro: |
          jammy
        private_key: ${{ secrets.APT_KEY }}
        update_directory: ../deb-uploads
